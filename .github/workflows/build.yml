
on:
  push:
    branches:
      - main

name: Build, QA code, test and release

jobs:
  build_job:
    name: Build
    runs-on: ubuntu-latest

    outputs:
      jar_file: ${{ steps.read_jar_name.outputs.jar_file}}
      server_jar_file: ${{ steps.read_server_jar_name.outputs.jar_file}}
      mc_version: ${{ steps.read_mc_version.outputs.version}}
      final_version: ${{ steps.read_final_version.outputs.version}}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
                
    - name: Install jq
      run: sudo apt-get install jq

    - name: Read version.json into output variable
      id: read_version_json
      run: echo ::set-output name=json::$(cat ./version.json | jq '.')

    - name: Read MOD version into output variable
      id: read_mod_version
      run: echo ::set-output name=version::$(cat ./version.json | jq -r '.modVersion')

    - name: Read MC version into output variable
      id: read_mc_version
      run: echo ::set-output name=version::$(cat ./version.json | jq -r '.minecraftVersion')

    - name: Read final version into output variable
      id: read_final_version
      run: echo ::set-output name=version::${{ steps.read_mc_version.outputs.version }}-${{ steps.read_mod_version.outputs.version }}

    - name: Read jar name into output variable
      id: read_jar_name
      run: echo ::set-output name=jar_file::MonoMagic-${{ steps.read_mc_version.outputs.version }}-${{ steps.read_mod_version.outputs.version }}.jar

    - name: Setup JDK 1.17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        java-package: jdk
        cache: 'gradle'        

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: 7.5
    
    - name: Build with Gradle
      run: gradle build

    - name: Upload jar artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.read_jar_name.outputs.jar_file}}
        path: ./build/libs/${{ steps.read_jar_name.outputs.jar_file}}

  release_job:
    name: Release
    runs-on: ubuntu-latest
    needs: [build_job]

    steps:
    - name: Create artifact directory used for downloads 
      run: mkdir -p ${{ github.workspace }}/artifact    

    - name: Download jar artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ needs.build_job.outputs.jar_file}}
        path: ${{ github.workspace }}/artifact/
    
    - name: Display downloaded artifacts
      run: ls -la ${{ github.workspace }}/artifact/

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ needs.build_job.outputs.final_version }} - ${{ github.sha }}
        draft: true
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{ github.workspace }}/artifact/${{ needs.build_job.outputs.jar_file }}
        asset_name: ${{ needs.build_job.outputs.jar_file }}
        asset_content_type: application/zip
